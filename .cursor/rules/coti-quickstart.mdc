# Onboarding Guide

## Prerequisites

- Node.js (v14 or higher)
- npm or yarn package manager

## Project Setup

1. Create a new React application using create-react-app:
```bash
npx create-react-app my-coti-app --template typescript
cd my-coti-app
```

2. Install required dependencies:
```bash
npm install @web3modal/ethers @coti-io/coti-ethers
```

## Important Notes

- Do not use wagmi for this project
- The project should be built using create-react-app as the foundation

## Complete Implementation Example

Here's the complete implementation of App.tsx:

```typescript
import { useState } from 'react';
import './App.css';

import { createWeb3Modal, defaultConfig, useWeb3ModalProvider } from '@web3modal/ethers/react'
import { BrowserProvider } from '@coti-io/coti-ethers'

// Configure Web3Modal
const ethersConfig = defaultConfig({
  metadata: {
    name: 'COTI Remix Plugin',
    description: 'Plugin to add full support for the COTI V2 network to the Remix IDE',
    url: 'https://testnet.coti.io',
    icons: ['https://testnet.coti.io/favicon.ico']
  },
  enableEIP6963: true,
  enableInjected: true,
  enableCoinbase: true,
  rpcUrl: 'https://testnet.coti.io/rpc',
  defaultChainId: 7082400
})

// Initialize Web3Modal with complete configuration
createWeb3Modal({
  ethersConfig,
  enableOnramp: false,
  chains: [{
    chainId: 7082400,
    name: 'COTI Testnet',
    currency: 'COTI',
    explorerUrl: 'https://testnet.cotiscan.io',
    rpcUrl: 'https://testnet.coti.io/rpc'
  }],
  allowUnsupportedChain: true,
  defaultChain: {
    chainId: 7082400,
    name: 'COTI Testnet',
    currency: 'COTI',
    explorerUrl: 'https://testnet.cotiscan.io',
    rpcUrl: 'https://testnet.coti.io/rpc'
  },
  projectId: 'COTI_REMIX_PLUGIN',
  enableAnalytics: false,
  allWallets: "HIDE"
})

function App() {
  const [aesKey, setAesKey] = useState('')
  const [txPending, setTxPending] = useState(false)
  const {walletProvider} = useWeb3ModalProvider()

  async function onboard() {
    if (walletProvider === undefined) throw Error('Wallet provider is undefined')

    const ethersProvider = new BrowserProvider(walletProvider)
    const signer = await ethersProvider.getSigner()

    setTxPending(true)
    await signer.generateOrRecoverAes()
    const key = signer.getUserOnboardInfo()
    setAesKey(key?.aesKey!)
    setTxPending(false)
  }

  return (
    <div className="App">
      <h1>COTI Browser Onboard Example</h1>
      <w3m-button />
      <button onClick={async () => await onboard()}>onboard</button>
      <h3>AES KEY: {aesKey}</h3>
      { txPending ? <p>Tx pending...</p> : <></> }
    </div>
  );
}

export default App;
```

## Best Practices

1. Always handle wallet connection states properly
2. Implement proper error handling for blockchain interactions
3. Use TypeScript for better type safety
4. Follow React best practices for state management
5. Keep your project dependencies up to date

## Troubleshooting

If you encounter any issues:
1. Check your network configuration
2. Verify your wallet connection
3. Ensure all required dependencies are installed
4. Check the browser console for any error messages

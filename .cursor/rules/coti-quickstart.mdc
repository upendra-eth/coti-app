# COTI MetaMask Integration Guide

## Overview
This rule provides guidance for integrating MetaMask directly with COTI blockchain applications, avoiding Web3Modal in favor of a simpler MetaMask-specific implementation.

## Installation

1. **Install COTI Ethers**
```bash
npm install @coti-io/coti-ethers ethers
```

## Core Components

### MetaMask Connection
- Use `window.ethereum` to detect and connect to MetaMask
- Request account access using `eth_requestAccounts`
- Handle connection state with React hooks

### COTI Integration
- Use CotiEthers for COTI blockchain interactions
- Initialize CotiEthers with the connected MetaMask provider
- Handle wallet state and balance queries

## Implementation Steps

1. **MetaMask Detection**
```typescript
const checkMetaMask = () => {
  if (typeof window.ethereum !== 'undefined') {
    return true;
  }
  return false;
};
```

2. **Connect Function**
```typescript
const connectMetaMask = async () => {
  try {
    const accounts = await window.ethereum.request({
      method: 'eth_requestAccounts'
    });
    return accounts[0];
  } catch (error) {
    console.error('User rejected connection');
    return null;
  }
};
```

3. **COTI Integration and Onboarding**
```typescript
import { BrowserProvider } from 'ethers';
import { CotiEthers } from '@coti-io/coti-ethers';

// Initialize COTI with MetaMask provider
const initializeCoti = async (provider) => {
  const coti = new CotiEthers({
    provider: provider
  });
  return coti;
};

// User Onboarding Process
interface OnboardingState {
  aesKey: string | null;
  txPending: boolean;
}

const onboardUser = async (walletProvider: any): Promise<OnboardingState> => {
  if (walletProvider === undefined) {
    throw Error('Wallet provider is undefined');
  }

  const ethersProvider = new BrowserProvider(walletProvider);
  const signer = await ethersProvider.getSigner();

  // Generate or recover AES key
  await signer.generateOrRecoverAes();
  const key = signer.getUserOnboardInfo();

  return {
    aesKey: key?.aesKey || null,
    txPending: false
  };
};

// Example Usage in React Component
const OnboardingComponent = () => {
  const [aesKey, setAesKey] = useState<string | null>(null);
  const [txPending, setTxPending] = useState(false);

  const handleOnboarding = async () => {
    try {
      setTxPending(true);
      const { aesKey } = await onboardUser(window.ethereum);
      setAesKey(aesKey);
    } catch (error) {
      console.error('Onboarding failed:', error);
    } finally {
      setTxPending(false);
    }
  };
};
```

## Best Practices

1. Always check for MetaMask availability before attempting connection
2. Handle connection state changes using `accountsChanged` and `chainChanged` events
3. Implement proper error handling for rejected connections
4. Store connection state in React context for global access
5. Use TypeScript for better type safety and development experience
6. Securely store and manage AES keys
7. Implement proper loading states during onboarding

## Error Handling

Handle common MetaMask and COTI errors:
- User rejection
- Network disconnection
- Chain ID mismatch
- Unauthorized access
- AES key generation failures
- Onboarding process failures

## Security Considerations

1. Never store private keys
2. Validate all transactions before signing
3. Use environment variables for sensitive configuration
4. Implement proper error boundaries
5. Follow MetaMask's security best practices
6. Securely handle AES keys
7. Implement proper session management

## Example Component Structure

```typescript
// MetaMaskProvider.tsx
interface MetaMaskContextType {
  isConnected: boolean;
  account: string | null;
  aesKey: string | null;
  connect: () => Promise<void>;
  disconnect: () => void;
  onboard: () => Promise<void>;
}

// App.tsx
const App = () => {
  return (
    <MetaMaskProvider>
      <YourComponents />
    </MetaMaskProvider>
  );
};
```

## Testing

1. Test MetaMask detection
2. Test connection/disconnection flows
3. Test COTI transaction handling
4. Test error scenarios
5. Test network switching
6. Test onboarding process
7. Test AES key generation and recovery
8. Test transaction signing with generated keys

## References
- MetaMask Documentation: https://docs.metamask.io
- COTI Documentation: https://docs.coti.io
- COTI-ethers Documentation: https://github.com/coti-io/coti-ethers
